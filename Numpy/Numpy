ðŸ“˜ NumPy â€“ Detailed Notes
1. ðŸ”¹ What is NumPy?

NumPy (Numerical Python) is a Python library used for numerical and scientific computing.

It provides ndarray (n-dimensional array) which is more powerful and faster than Pythonâ€™s normal list.

Written in C and optimized with BLAS & LAPACK (low-level math libraries), so operations are extremely fast.

2. ðŸ”¹ Why Use NumPy Instead of List?
Feature	Python List	NumPy Array
Storage	Stores pointers to objects (slower)	Stores homogeneous data in continuous memory
Speed	Slower due to dynamic typing	Much faster (vectorized C code)
Operations	Element-wise loops	Vectorized, no explicit loop required
Memory	More memory usage	Compact memory

ðŸ‘‰ Example: a + b in list â†’ error,
But in NumPy â†’ adds element-wise instantly.

3. ðŸ”¹ Where is NumPy Used?

Data Science & Machine Learning â†’ Handling large datasets, matrix operations.

Image Processing â†’ Pixels stored as arrays.

Scientific Simulations â†’ Physics, chemistry, statistics.

Finance â†’ Time-series, stock market analysis.

AI & Deep Learning â†’ Tensor libraries like TensorFlow, PyTorch are built on NumPy.

4. ðŸ”¹ NumPy Array Basics

Main object: ndarray (n-dimensional array).

Properties:

ndarray.ndim â†’ number of dimensions

ndarray.shape â†’ (rows, cols)

ndarray.size â†’ total elements

ndarray.dtype â†’ data type

ndarray.itemsize â†’ memory used per element

ndarray.nbytes â†’ total memory

5. ðŸ”¹ Array Creation Functions
Function	Purpose
np.array()	Convert list/tuple to array
np.zeros((m,n))	Create all zeros array
np.ones((m,n))	Create all ones array
np.full((m,n), value)	Create array with a fixed value
np.eye(n)	Identity matrix
np.arange(start, stop, step)	Like range() but array
np.linspace(start, stop, num)	Equally spaced numbers
np.random.rand(m,n)	Random numbers [0,1]
np.random.randint(low, high, size)	Random integers
6. ðŸ”¹ Indexing & Slicing Arrays

Access elements with [ ] like lists.

Supports slicing: arr[start:end:step].

Can use boolean indexing: arr[arr > 5].

Fancy indexing: arr[[1,3,5]].

7. ðŸ”¹ Reshaping & Manipulation

arr.reshape(m,n) â†’ change shape.

arr.flatten() â†’ convert to 1D.

arr.T â†’ transpose.

np.vstack((a,b)) â†’ stack vertically.

np.hstack((a,b)) â†’ stack horizontally.

np.concatenate([a,b], axis=0/1) â†’ join arrays.

8. ðŸ”¹ Array Modification

Assign values directly: arr[1:3] = 10.

Replace using condition: arr[arr<0] = 0.

Delete/Insert:

np.delete(arr, index, axis)

np.insert(arr, index, value, axis)

9. ðŸ”¹ Broadcasting & Vectorization

Broadcasting: NumPy automatically expands arrays of different shapes to match.
ðŸ‘‰ Example:

a = np.array([1,2,3])
b = 5
print(a + b)   # [6,7,8]


Vectorization: Apply operations to all elements at once (no loops).

10. ðŸ”¹ Handling Missing Values

np.nan â†’ represents missing values.

Functions:

np.isnan(arr) â†’ check NaN values.

np.nan_to_num(arr) â†’ replace NaN with 0.

np.nanmean(arr) â†’ mean ignoring NaN.

np.nanmax(arr) / np.nanmin(arr) â†’ ignore NaN.

11. ðŸ”¹ Important Mathematical Functions
Function	Work
np.add, np.subtract, np.multiply, np.divide	Element-wise arithmetic
np.sum(), np.mean(), np.median()	Statistics
np.std(), np.var()	Standard deviation, variance
np.max(), np.min(), np.argmax(), np.argmin()	Min/Max and their index
np.dot(a,b)	Dot product (matrix multiplication)
np.linalg.inv()	Matrix inverse
np.linalg.det()	Determinant
np.linalg.eig()	Eigenvalues, eigenvectors
12. ðŸ”¹ Advantages of NumPy

âœ… Superfast compared to lists
âœ… Supports large data (GBs of arrays)
âœ… Integrated with other libraries (Pandas, TensorFlow)
âœ… Rich set of mathematical & statistical tools

13. ðŸ”¹ Summary

NumPy = Base of Python Scientific Computing.

Provides fast, memory-efficient arrays.

Supports matrix operations, statistics, reshaping, broadcasting.

Used everywhere: AI, ML, Data Science, Engineering, Finance.